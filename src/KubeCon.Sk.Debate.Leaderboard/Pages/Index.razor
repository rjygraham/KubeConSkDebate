@page "/"
@using Humanizer
@using KubeCon.Sk.Debate.Leaderboard.Hubs
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client
@using KubeCon.Sk.Debate.Abstractions
@using KubeCon.Sk.Debate.Abstractions.Models
@using MudBlazor
@inject NavigationManager _navigationManager
@inject IHttpClientFactory _clientFactory

<PageTitle>Semantic Kernel Debate</PageTitle>

@if (_debate != null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Class="mud-theme-secondary d-flex align-center justify-center mud-width-full py-1">
                        <MudText Typo="Typo.h4" Class="lucky align-center">@_debate?.Topic</MudText>
                    </MudPaper>
                </MudItem>

                <MudItem xs="4">
                    <MudPaper Class="@($"{_agent1Theme} d-flex align-center justify-center mud-width-full py-1")">
                        <MudText Typo="Typo.h6" Class="lucky align-center">@_debate?.Debater1?.Name.Humanize(LetterCasing.Title)</MudText>
                    </MudPaper>
                </MudItem>

                <MudItem xs="4">
                    <MudPaper Class="@($"{_moderatorTheme} d-flex align-center justify-center mud-width-full py-1")">
                        <MudText Typo="Typo.h6" Class="lucky align-center">@_debate?.Moderator?.Name.Humanize(LetterCasing.Title)</MudText>
                    </MudPaper>
                </MudItem>


                <MudItem xs="4">
                    <MudPaper Class="@($"{_agent2Theme} d-flex align-center justify-center mud-width-full py-1")">
                        <MudStack Class="align-center">
                            <MudText Typo="Typo.h6" Class="lucky">@_debate?.Debater2?.Name.Humanize(LetterCasing.Title)</MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>


        <MudItem xs="12">
            <MudTimeline TimelinePosition="TimelinePosition.Alternate" Modifiers="true" hidden="@(_debate?.ChatHistory.Count == 0)">
                @foreach (var message in _debate?.ChatHistory)
                {
                    <MudTimelineItem Size="Size.Medium" Elevation="1" Color="@GetThemeColor(message.Author)">
                        <ItemContent>
                            <MudPaper Class="@($"{GetThemeClass(message.Author)} d-flex align-center justify-center mud-width-full py-1 mb-1")">
                                <MudText Typo="Typo.h5" Class="lucky align-center">@message.Author.Humanize(LetterCasing.Title)</MudText>
                            </MudPaper>
                            <MudText>@(new MarkupString(message.Content))</MudText>
                        </ItemContent>
                    </MudTimelineItem>
                }
            </MudTimeline>
        </MudItem>

        <MudItem xs="12" hidden="@(!_isWinnerSelectionOpen)">
            <MudPaper Class="mud-theme-secondary d-flex align-center justify-center mud-width-full py-1">
                <MudText Typo="Typo.h5" Class="lucky align-center">Who made the most compelling argument?</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="6" hidden="@(!_isWinnerSelectionOpen)">
            <MudButton OnClick="() => OnSelectWinner(_debate?.Debater1?.Name)" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="lucky align-center">@_debate?.Debater1?.Name.Humanize()</MudButton>
        </MudItem>
        <MudItem xs="6" hidden="@(!_isWinnerSelectionOpen)">
            <MudButton OnClick="() => OnSelectWinner(_debate?.Debater2?.Name)" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="lucky align-center">@_debate?.Debater2?.Name.Humanize()</MudButton>
        </MudItem>
    </MudGrid>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudButton OnClick="OnStartDebate" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="lucky">Start Debate</MudButton>
        </MudItem>


        @if (_latestUpdate != null)
        {
            <MudItem xs="6">
                <MudPaper Class="mud-theme-primary d-flex align-center justify-center mud-width-full py-1">
                    <MudStack Class="align-center">
                        <MudText Typo="Typo.h4" Class="lucky">Grain Count : @_latestUpdate?.GrainsActive.ToString("N0")</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>

            <MudItem xs="6">
                <MudPaper Class="mud-theme-primary d-flex align-center justify-center mud-width-full py-1">
                    <MudStack Class="align-center">
                        <MudText Typo="Typo.h4" Class="lucky">Server Statistics</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>

            <MudItem xs="6">
                <MudPaper Elevation="0">
                    <MudCard Elevation="1">
                        <MudCardContent>
                            <MudChart ChartType="ChartType.Line"
                            Class="my-0 pa-0"
                            ChartSeries="@Series"
                            Width="100%"
                            Height="100%"
                            ChartOptions="@_options"></MudChart>
                        </MudCardContent>
                    </MudCard>
                </MudPaper>
            </MudItem>

            <MudItem xs="6">   
                <MudPaper Class="d-flex flex-grow-1 pa-1 mb-2" Elevation="0">
                    <MudPaper Class="flex-grow-1 pl-2" Elevation="0">
                        <MudText Typo="Typo.h5" Class="d-block pathway">Started</MudText>
                    </MudPaper>
                    <MudChip T="DateTime" Text="@($"{@_latestUpdate.DateStarted}")" Class="lucky" Style="font-size: 1.5em;" Variant="Variant.Filled" Color="Color.Info"></MudChip>
                </MudPaper>

                <MudPaper Class="d-flex flex-grow-1 pa-1 mb-2" Elevation="0">
                    <MudPaper Class="flex-grow-1 pl-2" Elevation="0">
                        <MudText Typo="Typo.h5" Class="d-block pathway">Uptime</MudText>
                    </MudPaper>
                    <MudChip T="string" Text="@_latestUpdate.TimeUp.ToString("hh\\:mm\\:ss")" Class="lucky" Style="font-size: 1.5em;" Variant="Variant.Filled" Color="Color.Info"></MudChip>
                </MudPaper>

                <MudPaper Class="d-flex flex-grow-1 pa-1 mb-2" Elevation="0">
                    <MudPaper Class="flex-grow-1 pl-2" Elevation="0">
                        <MudText Typo="Typo.h5" Class="d-block pathway">Debates completed</MudText>
                    </MudPaper>
                    <MudChip T="string" Text="@_latestUpdate.DebatesCompleted.ToString("N0")" Class="lucky" Style="font-size: 1.5em;" Variant="Variant.Filled" Color="Color.Info"></MudChip>
                </MudPaper>
            </MudItem>

            <MudItem xs="12">
                <MudPaper Class="mud-theme-primary d-flex align-center justify-center mud-width-full py-2 mb-2">
                    <MudText Typo="Typo.h4" Class="banger">Leaderboard</MudText>
                </MudPaper>

                @foreach (var agent in _agentsOnline)
                {
                    <MudPaper Class="d-flex flex-grow-1 pa-1 mb-2" Elevation="0">
                        <MudChip T="string" Text="@($"{agent.PercentWon}%")" Class="lucky" Style="font-size: 2em;" Variant="Variant.Filled" Color="Color.Info" SelectedColor="Color.Primary"></MudChip>
                        <MudPaper Class="flex-grow-1 pl-2" Elevation="0">
                            <MudText Typo="Typo.h5" Class="lucky">@agent.Name.Humanize()</MudText>
                        </MudPaper>
                    </MudPaper>
                }
            </MudItem>
        }
    </MudGrid>
}

@code
{
    Debate? _debate;
    List<Agent> _agentsOnline = new();
    bool _isWinnerSelectionOpen = false;

    string _agent1Theme = "mud-theme-tertiary";
    string _moderatorTheme = "mud-theme-info";
    string _agent2Theme = "mud-theme-warning";
    string _signalrUrl = string.Empty;

    public List<ChartSeries> Series = new List<ChartSeries>();
    private List<double> _data = new();
    SystemStatusUpdate? _latestUpdate;
    HttpClient _apiClient = null;

    private ChartOptions _options = new()
        {
            ShowLegend = false,
            InterpolationOption = InterpolationOption.NaturalSpline,
            LineStrokeWidth = 8
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _apiClient = _clientFactory.CreateClient("debate-host");
            _signalrUrl = _navigationManager.ToAbsoluteUri("/hubs/leaderboard").AbsoluteUri;

            var hubConnection = new HubConnectionBuilder()
                .WithAutomaticReconnect()
                .WithUrl(_signalrUrl)
                .Build();

            for (int i = 0; i < 100; i++) _data.Add(0);

            Series = new List<ChartSeries>()
            {
                new ChartSeries() { Name = "Grain Count", Data = _data.ToArray() }
            };

            hubConnection.On<string>("OnDebateTopicSelected", (debateTopic) =>
            {
                _debate = new Debate();
                _debate.Topic = debateTopic;
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<AgentDescriptor, AgentDescriptor, AgentDescriptor>("OnDebateAgentsSelected", (moderator, debater1, debater2) =>
            {
                _debate.Moderator = moderator;
                _debate.Debater1 = debater1;
                _debate.Debater2 = debater2;
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<DateTime>("OnDebateStarted", (endTime) =>
            {

                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<ChatMessage>("OnDebateChatMessageAdded", message =>
            {
                _debate?.ChatHistory.Add(message);
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<DateTime>("OnDebateEnded", (endTime) =>
            {
                _isWinnerSelectionOpen = true;
                InvokeAsync(StateHasChanged);
            });


            hubConnection.On<List<Agent>>("OnAgentsOnlineUpdated", (agentsOnline) =>
            {
                _agentsOnline = agentsOnline;
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<SystemStatusUpdate>("OnSystemStatusUpdated", (update) =>
            {
                _latestUpdate = update;
                _data.RemoveAt(0);
                _data.Add(update.GrainsActive);

                Series = new List<ChartSeries>() 
                {
                    new() { Name = "Grain Count", Data = _data.ToArray() }
                };

                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private Color GetThemeColor(string agentName)
    {
        switch (agentName)
        {
            case var name when name.Equals(_debate?.Debater1?.Name):
                return Color.Tertiary;
            case var name when name.Equals(_debate?.Moderator?.Name):
                return Color.Info;
            case var name when name.Equals(_debate?.Debater2?.Name):
                return Color.Warning;
            default:
                return Color.Primary;
        }
    }

    private string GetThemeClass(string agentName)
    {
        switch (agentName)
        {
            case var name when name.Equals(_debate?.Debater1?.Name):
                return _agent1Theme;
            case var name when name.Equals(_debate?.Moderator?.Name):
                return _moderatorTheme;
            case var name when name.Equals(_debate?.Debater2?.Name):
                return _agent2Theme;
            default:
                return "mud-theme-primary";
        }
    }

    private async Task OnStartDebate()
    {
        var response = await _apiClient.PostAsync("start", null);
    }

    private async Task OnSelectWinner(string agentName)
    {
        var response = await _apiClient.PostAsync($"selectWinner?agentName={agentName}", null);

        if (response.IsSuccessStatusCode)
        {
            _debate = null;
            _isWinnerSelectionOpen = false;
            await InvokeAsync(StateHasChanged);
        }
    }
   
}
